label.prop=2,sizeLat = 6,"std", layout="circle2")
library(semPlot)
install.packages("OpenMx")
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","corrplot",
"editrules","readxl","factoextra","FactoMineR","ade4","parameters","apa","haven","ggplot2","ggpubr","gridExtra",
"apaTables", "reshape", "GPArotation", "mvtnorm", "psych",
"psychometric", "lavaan", "nFactors", "semPlot", "lavaan", "MVN",
"semTools")
easypackages::packages(lib_req)
#Concultoria LENIN
# LIBRERIAS ----
install.packages("easypackages")
library("easypackages")
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","corrplot",
"editrules","readxl","factoextra","FactoMineR","ade4","parameters","apa","haven","ggplot2","ggpubr","gridExtra",
"apaTables", "reshape", "GPArotation", "mvtnorm", "psych",
"psychometric", "lavaan", "nFactors", "semPlot", "lavaan", "MVN",
"semTools")
easypackages::packages(lib_req)
#Análisis Factorial Confirmatorio para la segunda dimensionalidad.
library(lavaan)
library(semPlot)
install.packages("OpenMx")
install.packages("OpenMx")
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","corrplot",
"editrules","readxl","factoextra","FactoMineR","ade4","parameters","apa","haven","ggplot2","ggpubr","gridExtra",
"apaTables", "reshape", "GPArotation", "mvtnorm", "psych",
"psychometric", "lavaan", "nFactors", "semPlot", "lavaan", "MVN",
"semTools")
easypackages::packages(lib_req)
library(semPlot)
easypackages::packages(lib_req)
semPaths(CFAdiscre, intercepts = FALSE,edge.label.cex=1.5,
optimizeLatRes = TRUE, groups = "lat",pastel = TRUE,
exoVar = FALSE, sizeInt=5,edge.color ="black",esize = 6,
label.prop=2,sizeLat = 6,"std", layout="circle2")
semPaths(CFAdiscre, intercepts = FALSE,edge.label.cex=0.8,
optimizeLatRes = TRUE, groups = "lat",pastel = TRUE,
exoVar = FALSE, sizeInt=5,edge.color ="black",esize = 6,
label.prop=2,sizeLat = 6,"std", layout="circle2")
semPaths(CFAdiscre, intercepts = FALSE,edge.label.cex=0.8,
optimizeLatRes = TRUE, groups = "lat",pastel = TRUE,
exoVar = FALSE, sizeInt=2.5,edge.color ="black",esize = 3.5,
label.prop=0.8,sizeLat = 3.5,"std", layout="circle2")
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","corrplot",
"editrules","readxl","factoextra","FactoMineR","ade4","parameters","apa","haven","ggplot2","ggpubr","gridExtra",
"apaTables", "reshape", "GPArotation", "mvtnorm", "psych",
"psychometric", "lavaan", "nFactors", "semPlot", "lavaan", "MVN",
"semTools")
easypackages::packages(lib_req)
# Número de filas originales
n <- nrow(discrecional)
# Bootstrap para duplicar el tamaño (muestreo con reemplazo)
set.seed(123)  # Para reproducibilidad
indices_bootstrap <- sample(1:n, size = 2*n, replace = TRUE)
df_bootstrap <- discrecional[indices_bootstrap, ]
df_bootstrap
PCA(discrecional[,c(13:27)])
fviz_pca_var(PCA(df_bootstrap[,c(13:27)]))
pca_discre <- PCA(discrecional[,c(13:27)])
pca_discre <- PCA(discrecional[,c(13:27)])
indices_pca <- function(data){
pca_sec <- PCA(data)
Coord <-pca_sec$var$coord[,1]
vl_p <- pca_sec$eig[1]
vt_p <- Coord/sqrt(vl_p)
Pesos <- (vt_p/sum(vt_p))
print(sum(Pesos))
return(Pesos)
}
pesos_pca <- function(data){
pca_sec <- PCA(data)
Coord <-pca_sec$var$coord[,1]
vl_p <- pca_sec$eig[1]
vt_p <- Coord/sqrt(vl_p)
Pesos <- (vt_p/sum(vt_p))
print(sum(Pesos))
return(Pesos)
}
pca_discre <- pesos_pca(discrecional[,c(13:27)])
pca_discre
as.matrix(discrecional[,c(13:27)]) %*% pca_discre
indices_pca <- function(data){
pesos_x <- pesos_pca(data)
puntajes_ponderados <- as.matrix(data) %*% pesos_x
pun_min<-min(puntajes_ponderados); pun_max<-max(puntajes_ponderados)
puntaje<-round(((puntajes_ponderados-pun_min)/(pun_max-pun_min)),4)
return(puntaje)
}
pca_discre <- pesos_pca(discrecional[,c(13:27)])
ind_discre <- indices_pca(discrecional[,c(13:27)])
ind_discre
ind_discre_pca <- indices_pca(discrecional[,c(13:27)])
plot(density(ind_discre_pca))
max(ind_discre_pca)
min(ind_discre_pca)
which.max(ind_discre_pca)
pca_dilemas <- pesos_pca(discrecional[,c(28:40)])
ind_dilemas_pca <- indices_pca(discrecional[,c(28:40)])
ind_dilemas_pca
semPaths(CFAdiscre, intercepts = FALSE,edge.label.cex=0.8,
optimizeLatRes = TRUE, groups = "lat",pastel = TRUE,
exoVar = FALSE, sizeInt=2.5,edge.color ="black",esize = 3.5,
label.prop=0.8,sizeLat = 3.5,"std", layout="circle2")
pca_discre
pca_dilemas
pca_heuris <- pesos_pca(discrecional[,c(41:49)])
ind_heuris_pca <- indices_pca(discrecional[,c(41:49)])
ind_heuris_pca
pca_afront <- pesos_pca(discrecional[,c(50:58)])
ind_afront_pca <- indices_pca(discrecional[,c(50:58)])
pca_creati <- pesos_pca(discrecional[,c(59:71)])
ind_creati_pca <- indices_pca(discrecional[,c(59:71)])
lib_req<-c("lubridate","dplyr","visdat","missMDA","mice","DMwR2","corrplot",
"editrules","readxl","factoextra","FactoMineR","ade4","parameters","apa","haven","ggplot2","ggpubr","gridExtra",
"apaTables", "reshape", "GPArotation", "mvtnorm", "psych",
"psychometric", "lavaan", "nFactors", "semPlot", "lavaan", "MVN",
"semTools")
easypackages::packages(lib_req)
discrecional$ind_discre_pca <- ind_discre_pca
discrecional$ind_dilemas_pca <- ind_dilemas_pca
discrecional$ind_heuris_pca <- ind_heuris_pca
discrecional$ind_afront_pca <- ind_afront_pca
discrecional$ind_afront_pca<- ind_creati_pca
View(discrecional)
discrecional$ind_discre_pca
discrecional$ind_afront_pca<- ind_creati_pca
discrecional$ind_afront_pca <- ind_afront_pca
discrecional$ind_creati_pca<- ind_creati_pca
discrecional$ind_discre_pca <- ind_discre_pca
discrecional$ind_dilemas_pca <- ind_dilemas_pca
discrecional$ind_heuris_pca <- ind_heuris_pca
discrecional$ind_afront_pca <- ind_afront_pca
discrecional$ind_creati_pca<- ind_creati_pca
View(discrecional)
discrecional$ind_discrecional_pca <- rowMeans(discrecional[, c(78:82)], na.rm = TRUE)
ggplot(discrecional, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ sexo) +                      # Divide por la variable sexo
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discrecional, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ sexo) +                      # Divide por la variable sexo
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discrecional, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Sexo) +                      # Divide por la variable sexo
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discrecional %>% filter(Sexo %in% c("hombre", "mujer")),
aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density.., fill = sexo),
position = "identity",
alpha = 0.5,
bins = 30) +
geom_density(aes(color = sexo), linewidth = 1) +
labs(title = "Distribución por sexo (hombre y mujer)",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discrecional %>% filter(Sexo %in% c("hombre", "mujer")),
aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density.., fill = Sexo),
position = "identity",
alpha = 0.5,
bins = 30) +
geom_density(aes(color = sexo), linewidth = 1) +
labs(title = "Distribución por sexo (hombre y mujer)",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discrecional %>% filter(Sexo %in% c("hombre", "mujer")),
aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density.., fill = Sexo),
position = "identity",
alpha = 0.5,
bins = 30) +
geom_density(aes(color = Sexo), linewidth = 1) +
labs(title = "Distribución por sexo (hombre y mujer)",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discrecional %>% filter(Sexo %in% c("hombre", "mujer")),
aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density.., fill = Sexo),
position = "identity",
alpha = 0.5,
bins = 30) +
geom_density(aes(color = Sexo), linewidth = 1) +
labs(title = "Distribución por sexo (hombre y mujer)",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
#Descriptivas indicadores pca
datos_filtrados <- datos %>%
filter(sexo %in% c("hombre", "mujer"))
ggplot(discrecional, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Sexo) +                      # Divide por la variable sexo
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
#Descriptivas indicadores pca
datos_filtrados <- discrecional %>%
filter(Sexo %in% c("Hombre", "Mujer"))
ggplot(datos_filtrados, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Sexo) +                      # Divide por la variable sexo
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(datos_filtrados, aes(x = Sexo, y = ind_discre_pca, fill = Sexo)) +
geom_boxplot(alpha = 0.7) +
scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 5, color = "red")
ggplot(datos_filtrados, aes(x = Edad, y = ind_discre_pca, fill = Edad)) +
geom_boxplot(alpha = 0.7) +
#scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 5, color = "red")
ggplot(datos_filtrados, aes(x = Edad, y = ind_discre_pca, fill = Edad)) +
geom_boxplot(alpha = 0.7) +
#scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw() +
ggplot(datos_filtrados, aes(x = Edad, y = ind_discre_pca, fill = Edad)) +
geom_boxplot(alpha = 0.7) +
#scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw() #+
ggplot(datos_filtrados, aes(x = Edad, y = ind_discre_pca, fill = Edad)) +
geom_boxplot(alpha = 0.7) +
#scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw()
ggplot(datos_filtrados, aes(x = ind_discre_pca, fill = Sexo, color = Sexo)) +
geom_histogram(aes(y = ..density..),
position = "identity",  # Superpone los histogramas
alpha = 0.5,            # Transparencia para ver solapamiento
bins = 30) +            # Número de bins
geom_density(alpha = 0.3,              # Transparencia para las curvas
linewidth = 0.8) +        # Grosor de la línea
scale_fill_manual(values = c("Hombre" = "blue", "Mujer" = "pink")) +
scale_color_manual(values = c("Hombre" = "blue", "Mujer" = "red")) +
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(datos_filtrados, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Sexo) +                      # Divide por la variable sexo
labs(title = "Distribución por sexo",
x = "Variable continua",
y = "Densidad") +
theme_minimal()
ggplot(discreciona, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Edad) +                      # Divide por la variable sexo
labs(title = "Distribución por edad",
x = "Nivel de discrepancia",
y = "Densidad") +
theme_minimal()
ggplot(discrecional, aes(x = ind_discre_pca)) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Edad) +                      # Divide por la variable sexo
labs(title = "Distribución por edad",
x = "Nivel de discrepancia",
y = "Densidad") +
theme_minimal()
stat_summary(fun = mean, geom = "point", shape = 20, size = 5, color = "red")
ggplot(datos_filtrados, aes(x = Edad, y = ind_discre_pca, fill = Edad)) +
geom_boxplot(alpha = 0.7) +
#scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw() #+
stat_summary(fun = mean, geom = "point", shape = 20, size = 5, color = "red")
ggplot(datos_filtrados, aes(x = Edad, y = ind_discre_pca, fill = Edad)) +
geom_boxplot(alpha = 0.7) +
#scale_fill_manual(values = c("Mujer" = "pink", "Hombre" = "lightblue")) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 5, color = "red")
# Lista de variables categóricas que quieres graficar
variables <- c("Edad", "Años_de_graduado", "Años_en_el_puesto", "Años_en_la_AP")
# Crear una lista de gráficos
graficos <- lapply(variables, function(var) {
ggplot(datos_filtrados, aes(x = .data[[var]], y = ind_discre_pca, fill = .data[[var]])) +
geom_boxplot(alpha = 0.7) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "red") +
labs(x = var, y = "ind_discre_pca") +
theme(legend.position = "none")  # Ocultar leyenda para cada gráfico individual
})
# Crear una lista de gráficos
graficos <- lapply(variables, function(var) {
ggplot(datos_filtrados, aes(x = .data[[var]], y = ind_discre_pca, fill = .data[[var]])) +
geom_boxplot(alpha = 0.7) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "red") +
labs(x = var, y = "ind_discre_pca") +
theme(legend.position = "none")  # Ocultar leyenda para cada gráfico individual
})
graficos
# Organizar los gráficos en una cuadrícula
grid.arrange(grobs = graficos, ncol = 2)
# Variables categóricas (eje X)
variables_categoricas <- c("Edad", "Años_de_graduado", "Años_en_el_puesto", "Años_en_la_AP")
# Variables numéricas (eje Y)
variables_numericas <- c("ind_discre_pca", "ind_dilemas_pca", "ind_heuris_pca",
"ind_afront_pca", "ind_creati_pca", "ind_discrecional_pca")
# Función para crear gráficos para una variable numérica específica
crear_grid_graficos <- function(var_y) {
graficos <- lapply(variables_categoricas, function(var_x) {
ggplot(datos_filtrados, aes(x = .data[[var_x]], y = .data[[var_y]], fill = .data[[var_x]])) +
geom_boxplot(alpha = 0.7) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "red") +
labs(x = var_x, y = var_y) +
theme(legend.position = "none")
})
# Organizar en grid con título
grid.arrange(grobs = graficos, ncol = 2,
top = paste("Relación entre", var_y, "y variables categóricas"))
}
# Función para crear gráficos para una variable numérica específica
crear_grid_graficos <- function(var_y) {
graficos <- lapply(variables_categoricas, function(var_x) {
ggplot(discrecional, aes(x = .data[[var_x]], y = .data[[var_y]], fill = .data[[var_x]])) +
geom_boxplot(alpha = 0.7) +
theme_bw() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "red") +
labs(x = var_x, y = var_y) +
theme(legend.position = "none")
})
# Organizar en grid con título
grid.arrange(grobs = graficos, ncol = 2,
top = paste("Relación entre", var_y, "y variables categóricas"))
}
# Aplicar la función a cada variable numérica
lapply(variables_numericas, crear_grid_graficos)
# Crear los gráficos con lapply
graficos <- lapply(variables_numericas, function(var) {
ggplot(datos_filtrados, aes(x = .data[[var]])) +
geom_histogram(aes(y = ..density..),      # Histograma con densidad en el eje y
colour = "black",          # Color del borde
fill = "white",            # Color de relleno
bins = 30) +               # Número de bins
geom_density(alpha = 0.2, fill = "#FF6666") +  # Curva de densidad
facet_wrap(~ Sexo) +                      # Divide por la variable sexo
labs(title = paste("Distribución de", var, "por sexo"),
x = var,
y = "Densidad") +
theme_minimal()
})
graficos
easypackages::packages(lib_req)
# Crear el summary
data %>%
group_by(across(all_of(variables_categoricas))) %>%
summarise(
n = n(),
media = mean(.data[[variable_num]], na.rm = TRUE),
mediana = median(.data[[variable_num]], na.rm = TRUE),
sd = sd(.data[[variable_num]], na.rm = TRUE),
min = min(.data[[variable_num]], na.rm = TRUE),
max = max(.data[[variable_num]], na.rm = TRUE),
q1 = quantile(.data[[variable_num]], 0.25, na.rm = TRUE),
q3 = quantile(.data[[variable_num]], 0.75, na.rm = TRUE)
)
# Crear el summary
discrecional %>%
group_by(across(all_of(variables_categoricas))) %>%
summarise(
n = n(),
media = mean(.discrecional[[variable_num]], na.rm = TRUE),
mediana = median(.discrecional[[variable_num]], na.rm = TRUE),
sd = sd(.discrecional[[variable_num]], na.rm = TRUE),
min = min(.discrecional[[variable_num]], na.rm = TRUE),
max = max(.discrecional[[variable_num]], na.rm = TRUE),
q1 = quantile(.discrecional[[variable_num]], 0.25, na.rm = TRUE),
q3 = quantile(.discrecional[[variable_num]], 0.75, na.rm = TRUE)
)
# Crear el summary
discrecional %>%
group_by(across(all_of(variables_categoricas))) %>%
summarise(
n = n(),
media = mean(discrecional[[variable_num]], na.rm = TRUE),
mediana = median(discrecional[[variable_num]], na.rm = TRUE),
sd = sd(discrecional[[variable_num]], na.rm = TRUE),
min = min(discrecional[[variable_num]], na.rm = TRUE),
max = max(discrecional[[variable_num]], na.rm = TRUE),
q1 = quantile(discrecional[[variable_num]], 0.25, na.rm = TRUE),
q3 = quantile(discrecional[[variable_num]], 0.75, na.rm = TRUE)
)
# Variables numéricas (eje Y)
variable_num <- c("ind_discrecional_pca")
# Crear el summary
discrecional %>%
group_by(across(all_of(variables_categoricas))) %>%
summarise(
n = n(),
media = mean(discrecional[[variable_num]], na.rm = TRUE),
mediana = median(discrecional[[variable_num]], na.rm = TRUE),
sd = sd(discrecional[[variable_num]], na.rm = TRUE),
min = min(discrecional[[variable_num]], na.rm = TRUE),
max = max(discrecional[[variable_num]], na.rm = TRUE),
q1 = quantile(discrecional[[variable_num]], 0.25, na.rm = TRUE),
q3 = quantile(discrecional[[variable_num]], 0.75, na.rm = TRUE)
)
for (var in variables_factor) {
cat("\nResumen por:", var, "\n")
# Usar la variable como símbolo para tidy evaluation
resumen <- discrecional %>%
group_by(.data[[var]]) %>%
summarise(
Media   = mean(ind_discrecional_pca, na.rm = TRUE),
Mediana = median(ind_discrecional_pca, na.rm = TRUE),
Q1      = quantile(ind_discrecional_pca, 0.25, na.rm = TRUE),
Q3      = quantile(ind_discrecional_pca, 0.75, na.rm = TRUE),
IQR     = IQR(ind_discrecional_pca, na.rm = TRUE),
SD      = sd(ind_discrecional_pca, na.rm = TRUE),
n       = n(),
.groups = "drop"
)
print(resumen)
}
easypackages::packages(lib_req)
semPaths(CFAdiscre, intercepts = FALSE,edge.label.cex=0.8,
optimizeLatRes = TRUE, groups = "lat",pastel = TRUE,
exoVar = FALSE, sizeInt=2.5,edge.color ="black",esize = 3.5,
label.prop=0.8,sizeLat = 3.5,"std", layout="circle2")
fitMeasures(CFAdiscre )
easypackages::packages(lib_req)
fitMeasures(CFAdiscre )
easypackages::packages(lib_req)
graficos
# Aplicar la función a cada variable numérica
lapply(variables_numericas, crear_grid_graficos)
# Aplicar la función a cada variable numérica
lapply(variables_numericas, crear_grid_graficos)
easypackages::packages(lib_req)
pca_discre
pca_dilemas
pca_heuris
pca_afront
pca_creati
# KMO
KMO(discrecional[,c(13:27)]) # Índice general
easypackages::packages(lib_req)
cortest.bartlett(cor(discrecional[,c(13:27)]
, use = "complete.obs"),
n = nrow(na.omit(discrecional[,c(13:27)])))
cortest.bartlett(cor(discrecional[,c(28:40)]
, use = "complete.obs"),
n = nrow(na.omit(discrecional[,c(28:40)])))
cortest.bartlett(cor(discrecional[,c(41:49)]
, use = "complete.obs"),
n = nrow(na.omit(discrecional[,c(41:49)])))
cortest.bartlett(cor(discrecional[,c(50:58)]
, use = "complete.obs"),
n = nrow(na.omit(discrecional[,c(50:58)])))
cortest.bartlett(cor(discrecional[,c(59:71)]
, use = "complete.obs"),
n = nrow(na.omit(discrecional[,c(59:71)])))
fitMeasures(CFAdiscre)
semPaths(CFAdiscre, intercepts = FALSE,edge.label.cex=0.8,
optimizeLatRes = TRUE, groups = "lat",pastel = TRUE,
exoVar = FALSE, sizeInt=2.5,edge.color ="black",esize = 3.5,
label.prop=0.8,sizeLat = 3.5,"std", layout="circle2")
pca_discre
ind_discre_pca
ind_dilemas_pca
discrecional$ind_discrecional_pca
